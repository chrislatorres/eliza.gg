// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "partnerships",
    columns: [
      { name: "name", type: "text", notNull: true, defaultValue: "" },
      { name: "category", type: "text", notNull: true, defaultValue: "" },
      { name: "interests", type: "text", notNull: true, defaultValue: "" },
      { name: "contactInfo", type: "text", notNull: true, defaultValue: "" },
      { name: "status", type: "text", defaultValue: "pending" },
      { name: "source", type: "text" },
      { name: "telegram_username", type: "text" },
    ],
  },
  {
    name: "ai_logs",
    columns: [
      { name: "userMessage", type: "text" },
      { name: "aiResponse", type: "text" },
    ],
  },
  {
    name: "token_allocations",
    columns: [
      { name: "githubUsername", type: "text" },
      { name: "tokenSymbol", type: "text" },
      { name: "amount", type: "float" },
      { name: "allocatedBy", type: "text" },
      { name: "claimed", type: "bool" },
      { name: "claimedAt", type: "datetime" },
      { name: "claimTransaction", type: "text" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Partnerships = InferredTypes["partnerships"];
export type PartnershipsRecord = Partnerships & XataRecord;

export type AiLogs = InferredTypes["ai_logs"];
export type AiLogsRecord = AiLogs & XataRecord;

export type TokenAllocations = InferredTypes["token_allocations"];
export type TokenAllocationsRecord = TokenAllocations & XataRecord;

export type DatabaseSchema = {
  partnerships: PartnershipsRecord;
  ai_logs: AiLogsRecord;
  token_allocations: TokenAllocationsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Christopher-La-Torres-s-workspace-rr2kpv.us-east-1.xata.sh/db/eliza",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
